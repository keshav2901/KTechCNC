package bootcamp1;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class bNode
{
	int data;
	bNode left;
	bNode right;
	bNode(int n)
	{
		data=n;
		left=null;
		right=null;
	}
}
public class binarytree {
	bNode root=null;
    //this is binary search tree
    public void insert(bNode temp,int data)
    {  
    	if(temp.data<data&&temp.right!=null)
    	{
    		insert(temp.right,data);
    	}
    	else if(temp.data>data&&temp.left!=null)
    	{
    		insert(temp.left,data);
    	}
    	else if(temp.data<data&&temp.right==null)
    	{
    		bNode newnode=new bNode(data);
    		System.out.println(data+" inserted on the right of "+temp.data);
    		temp.right=newnode;
    	}
    	else if(temp.data>data&&temp.left==null)
    	{
    		bNode newnode=new bNode(data);
    		System.out.println(data+" inserted on the left of "+temp.data);
    		temp.left=newnode;
    	}
    }
    public void inorder(bNode temp)
    {
    	if(temp==null)
    		return;
    	inorder(temp.left);
    	System.out.print(temp.data+" ");
    	inorder(temp.right);
    	
    }
    public void levelorderdisplay(bNode temp)
    {
    	Queue<bNode> x=new LinkedList<bNode>();
    	x.add(temp);
    	int noofnodes=x.size();
    
		while(noofnodes>0)
    	{                       // 6 7
    		bNode node=x.peek();//node=5
    		x.remove();
    		System.out.print(node.data+" ");
    		if(node.left!=null)
    			x.add(node.left);
    		if(node.right!=null)
    			x.add(node.right);
    		noofnodes=x.size();
    	}
    		
    	
    }
    public void levelorderinsert(bNode temp,int data)
    {
    	if(temp==null)
    	{
    		root=new bNode(data);
    		return;
    	}
    	Queue<bNode> x=new LinkedList<bNode>();
    	x.add(temp);
    	int noofnodes=x.size();
    
		while(noofnodes>0)
    	{
    		bNode node=x.peek();
    		x.remove();
    		if(node.left==null)
    		{
    			node.left=new bNode(data);
    			break;
    		}
    		else
    		{
    			x.add(node.left);
    		}
    		if(node.right==null)
    		{
    			node.right=new bNode(data);
    			break;
    		}
    		else
    		{
    			x.add(node.right);
    		}
    		noofnodes=x.size();
    	}
    }
    public void preorder(bNode temp)
    {
    	if(temp==null)
    		return;
    	System.out.print(temp.data+" ");//root node
    	preorder(temp.left);//left subtree
    	preorder(temp.right);//right subtree
    	
    }
	public binarytree() {
		// TODO Auto-generated constructor stub
	}
     public static void main(String[] args) {
		// TODO Auto-generated method stub
		binarytree obj=new binarytree();
      bNode root=new bNode(10);//10 is root
      obj.levelorderinsert(root,5);
      obj.levelorderinsert(root,8);
      //obj.levelorderinsert(root,15);
      /*obj.insert(root,12);           //   10
      obj.insert(root, 6);           //  5     8
      obj.insert(root, 1);          // 15         
      obj.insert(root, 14);         //
      obj.preorder(root);   
      System.out.println();*/
      obj.inorder(root);
      	}

}
