package bootcamp1;
import java.util.*;
class btnode
{
	int data;
	btnode left;
	btnode right;
	btnode(int n)
	{
		data=n;
		left=null;
		right=null;
	}
}
public class btreelevel {
    btnode root=null;
	public btreelevel() {
		// TODO Auto-generated constructor stub
	}
	public void insertnode(btnode temp,int no)
	{
		if(temp==null)
		{
			root=new btnode(no);
			return;
		}
		Queue<btnode> x=new LinkedList<btnode>();
		x.add(temp);
		while(x.size()>0)
		{
			btnode node=x.peek();
			x.remove();
			if(node.left==null)
			{
				node.left=new btnode(no);
				break;
			}
			else
			{
				x.add(node.left);
			}
			if(node.right==null)
			{
				node.right=new btnode(no);
				break;
			}
			else
			{
				x.add(node.right);
			}
			
		}
	}
	public void levelorderprint(btnode temp)       // 10
	{                                              //20 30
		if(temp==null)
		{
			System.out.println("tree empty");
			return;
		}
		Queue<btnode> x=new LinkedList<btnode>();
		x.add(temp);
		while(x.size()>0)
		{
			btnode node=x.peek();
			System.out.print(node.data+" ");
			x.remove();
			if(node.left!=null)
				x.add(node.left);
			if(node.right!=null)
				x.add(node.right);
			
		}
	}
	public int totalleafs(btnode temp)
	{
		if(temp==null)
			return 0;
		else if(temp.right==null&&temp.left==null)
			return 1;
		else
			return totalleafs(temp.left)+totalleafs(temp.right);
	}
	public void totalleafsq(btnode temp)
	{
		Queue<btnode> x=new LinkedList<btnode>();
		x.add(temp);
		int leafnodes=0;
		while(x.size()>0)                    //  10
		{                                    //20   30
			btnode node=x.peek();           //40 50
			x.remove();
			if(node.left==null&&node.right==null) //50  //3
				leafnodes++;
			if(node.left!=null)
				x.add(node.left);
			if(node.right!=null)
			    x.add(node.right);
		}
		System.out.println("no of leafs:"+leafnodes);
	}
	
	public void deletenode(btnode temp,int data)
	{                                             //10
		Queue<btnode> x=new LinkedList<btnode>();
		x.add(temp);
		btnode cnode=null,pnode=null,keynode=null;
		while(x.size()>0)
		{
			cnode=x.peek();
			x.remove();//removes element from queue
			if(cnode.data==data)
				keynode=cnode;
			if(cnode.left!=null)
			{
				pnode=cnode;
				x.add(cnode.left);
			}
			if(cnode.right!=null)
			{
				pnode=cnode;
				x.add(cnode.right);
			}
		}
		if(keynode!=null)
		{
			keynode.data=cnode.data;
			if(pnode.right==cnode)
				pnode.right=null;
			if(pnode.left==cnode)
				pnode.left=null;
		}
	}
	public int totalnodes(btnode temp)
	{
		if(temp==null)
			return 0;
		else
			return 1+totalnodes(temp.left)+totalnodes(temp.right);
		
	}
	public int height(btnode temp)
	{
		if(temp==null)
			return -1;
		int lheight=height(temp.left);
		int rheight=height(temp.right);
		if(lheight>rheight)
			return 1+lheight;
		else
			return 1+rheight;
		
	}
	public void processtree()
	{
		//btnode root=new btnode(10);        10
		insertnode(root,10);             //20    30
		insertnode(root,20);            //40 50 60 70
		insertnode(root,30);   //10 20 30 40 50 60
	    insertnode(root,40);
	    insertnode(root,50);
	    insertnode(root,60);
	    insertnode(root,70);
	    levelorderprint(root);
	    System.out.println("No of leafs:"+totalleafs(root));
	    deletenode(root,30);
	    levelorderprint(root);
	    System.out.println("total nodes:"+totalnodes(root));
	    System.out.println("height:"+height(root));
	    dfs(root);
	} 
    public void dfs(btnode temp)
    {
    	if(temp==null)
    		return;
    	System.out.print(temp.data+" ");
    	dfs(temp.right);
    	dfs(temp.left);
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
      btreelevel obj=new btreelevel();
      obj.processtree();
	}

}
